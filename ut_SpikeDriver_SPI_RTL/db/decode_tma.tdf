--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_tma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode6653w[1..0]	: WIRE;
	w_anode6662w[3..0]	: WIRE;
	w_anode6679w[3..0]	: WIRE;
	w_anode6689w[3..0]	: WIRE;
	w_anode6699w[3..0]	: WIRE;
	w_anode6709w[3..0]	: WIRE;
	w_anode6719w[3..0]	: WIRE;
	w_anode6729w[3..0]	: WIRE;
	w_anode6739w[3..0]	: WIRE;
	w_anode6751w[1..0]	: WIRE;
	w_anode6758w[3..0]	: WIRE;
	w_anode6769w[3..0]	: WIRE;
	w_anode6779w[3..0]	: WIRE;
	w_anode6789w[3..0]	: WIRE;
	w_anode6799w[3..0]	: WIRE;
	w_anode6809w[3..0]	: WIRE;
	w_anode6819w[3..0]	: WIRE;
	w_anode6829w[3..0]	: WIRE;
	w_data6651w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode6829w[3..3], w_anode6819w[3..3], w_anode6809w[3..3], w_anode6799w[3..3], w_anode6789w[3..3], w_anode6779w[3..3], w_anode6769w[3..3], w_anode6758w[3..3]), ( w_anode6739w[3..3], w_anode6729w[3..3], w_anode6719w[3..3], w_anode6709w[3..3], w_anode6699w[3..3], w_anode6689w[3..3], w_anode6679w[3..3], w_anode6662w[3..3]));
	w_anode6653w[] = ( (w_anode6653w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode6662w[] = ( (w_anode6662w[2..2] & (! w_data6651w[2..2])), (w_anode6662w[1..1] & (! w_data6651w[1..1])), (w_anode6662w[0..0] & (! w_data6651w[0..0])), w_anode6653w[1..1]);
	w_anode6679w[] = ( (w_anode6679w[2..2] & (! w_data6651w[2..2])), (w_anode6679w[1..1] & (! w_data6651w[1..1])), (w_anode6679w[0..0] & w_data6651w[0..0]), w_anode6653w[1..1]);
	w_anode6689w[] = ( (w_anode6689w[2..2] & (! w_data6651w[2..2])), (w_anode6689w[1..1] & w_data6651w[1..1]), (w_anode6689w[0..0] & (! w_data6651w[0..0])), w_anode6653w[1..1]);
	w_anode6699w[] = ( (w_anode6699w[2..2] & (! w_data6651w[2..2])), (w_anode6699w[1..1] & w_data6651w[1..1]), (w_anode6699w[0..0] & w_data6651w[0..0]), w_anode6653w[1..1]);
	w_anode6709w[] = ( (w_anode6709w[2..2] & w_data6651w[2..2]), (w_anode6709w[1..1] & (! w_data6651w[1..1])), (w_anode6709w[0..0] & (! w_data6651w[0..0])), w_anode6653w[1..1]);
	w_anode6719w[] = ( (w_anode6719w[2..2] & w_data6651w[2..2]), (w_anode6719w[1..1] & (! w_data6651w[1..1])), (w_anode6719w[0..0] & w_data6651w[0..0]), w_anode6653w[1..1]);
	w_anode6729w[] = ( (w_anode6729w[2..2] & w_data6651w[2..2]), (w_anode6729w[1..1] & w_data6651w[1..1]), (w_anode6729w[0..0] & (! w_data6651w[0..0])), w_anode6653w[1..1]);
	w_anode6739w[] = ( (w_anode6739w[2..2] & w_data6651w[2..2]), (w_anode6739w[1..1] & w_data6651w[1..1]), (w_anode6739w[0..0] & w_data6651w[0..0]), w_anode6653w[1..1]);
	w_anode6751w[] = ( (w_anode6751w[0..0] & data_wire[3..3]), enable_wire);
	w_anode6758w[] = ( (w_anode6758w[2..2] & (! w_data6651w[2..2])), (w_anode6758w[1..1] & (! w_data6651w[1..1])), (w_anode6758w[0..0] & (! w_data6651w[0..0])), w_anode6751w[1..1]);
	w_anode6769w[] = ( (w_anode6769w[2..2] & (! w_data6651w[2..2])), (w_anode6769w[1..1] & (! w_data6651w[1..1])), (w_anode6769w[0..0] & w_data6651w[0..0]), w_anode6751w[1..1]);
	w_anode6779w[] = ( (w_anode6779w[2..2] & (! w_data6651w[2..2])), (w_anode6779w[1..1] & w_data6651w[1..1]), (w_anode6779w[0..0] & (! w_data6651w[0..0])), w_anode6751w[1..1]);
	w_anode6789w[] = ( (w_anode6789w[2..2] & (! w_data6651w[2..2])), (w_anode6789w[1..1] & w_data6651w[1..1]), (w_anode6789w[0..0] & w_data6651w[0..0]), w_anode6751w[1..1]);
	w_anode6799w[] = ( (w_anode6799w[2..2] & w_data6651w[2..2]), (w_anode6799w[1..1] & (! w_data6651w[1..1])), (w_anode6799w[0..0] & (! w_data6651w[0..0])), w_anode6751w[1..1]);
	w_anode6809w[] = ( (w_anode6809w[2..2] & w_data6651w[2..2]), (w_anode6809w[1..1] & (! w_data6651w[1..1])), (w_anode6809w[0..0] & w_data6651w[0..0]), w_anode6751w[1..1]);
	w_anode6819w[] = ( (w_anode6819w[2..2] & w_data6651w[2..2]), (w_anode6819w[1..1] & w_data6651w[1..1]), (w_anode6819w[0..0] & (! w_data6651w[0..0])), w_anode6751w[1..1]);
	w_anode6829w[] = ( (w_anode6829w[2..2] & w_data6651w[2..2]), (w_anode6829w[1..1] & w_data6651w[1..1]), (w_anode6829w[0..0] & w_data6651w[0..0]), w_anode6751w[1..1]);
	w_data6651w[2..0] = data_wire[2..0];
END;
--VALID FILE
